import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from googletrans import Translator
from gtts import gTTS
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É favorites, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            phrase TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(user_id, username, first_name, last_name):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
    if not cursor.fetchone():
        cursor.execute('''
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
def add_favorite_to_db(user_id, phrase):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO favorites (user_id, phrase)
        VALUES (?, ?)
    ''', (user_id, phrase))

    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_favorites_from_db(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute('SELECT phrase FROM favorites WHERE user_id = ?', (user_id,))
    favorites = cursor.fetchall()

    conn.close()
    return [fav[0] for fav in favorites]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def translate_text(text, dest_language):
    try:
        translation = translator.translate(text, dest=dest_language)
        return translation.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def create_voice_message(text, language):
    try:
        tts = gTTS(text=text, lang=language)
        filename = "voice_message.mp3"
        tts.save(filename)
        return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    user = update.message.from_user
    add_user_to_db(user.id, user.username, user.first_name, user.last_name)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
                             "/tolang - –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                             "/favourites - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
                             "/learn - –∏–∑—É—á–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n"
                             "/quiz - –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tolang
def tolang(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß", callback_data="lang_en"), InlineKeyboardButton("–†—É—Å—Å–∫–∏–πüá∑üá∫", callback_data="lang_ru")],
        [InlineKeyboardButton("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–πüá´üá∑", callback_data="lang_fr"), InlineKeyboardButton("–ù–µ–º–µ—Ü–∫–∏–πüá©üá™", callback_data="lang_de")],
        [InlineKeyboardButton("–¢–∞–¥–∂–∏–∫—Å–∫–∏–πüáπüáØ", callback_data="lang_tg"), InlineKeyboardButton("–£–∑–±–µ–∫—Å–∫–∏–πüá∫üáø", callback_data="lang_uz")],
        [InlineKeyboardButton("–ê—Ä–∞–±—Å–∫–∏–πüá∏üá¶", callback_data="lang_ar"), InlineKeyboardButton("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–πüáÆüáπ", callback_data="lang_it")],
        [InlineKeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π", callback_data="lang_zh-TW"), InlineKeyboardButton("–ö–∏—Ç–∞–π—Å–∫–∏–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–πüá®üá≥", callback_data="lang_zh-CN")],
        [InlineKeyboardButton("–ö–æ—Ä–µ–π—Å–∫–∏–πüá∞üá∑", callback_data="lang_ko"), InlineKeyboardButton("–Ø–ø–æ–Ω—Å–∫–∏–πüáØüáµ", callback_data="lang_ja")],
        [InlineKeyboardButton("–ò—Å–ø–∞–Ω—Å–∫–∏–πüá™üá∏", callback_data="lang_es"), InlineKeyboardButton("–¢—É—Ä–µ—Ü–∫–∏–πüáπüá∑", callback_data="lang_tr")],
        [InlineKeyboardButton("–ö–∞–∑–∞—Ö—Å–∫–∏–πüá∞üáø", callback_data="lang_kk"), InlineKeyboardButton("–ö—ã—Ä–≥—ã–∑—Å–∫–∏–πüá∞üá¨", callback_data="lang_ky")],
        [InlineKeyboardButton("–•–∏–Ω–¥–∏üáÆüá≥", callback_data="lang_hi"), InlineKeyboardButton("–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–πüáßüá©", callback_data="lang_bn")],
        [InlineKeyboardButton("–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–πüáµüáπ", callback_data="lang_pt"), InlineKeyboardButton("–£—Ä–¥—Éüáµüá∞", callback_data="lang_ur")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favourites
def show_favourites(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    favorites = get_favorites_from_db(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if favorites:
        favorite_texts = "\n".join(favorites)
        update.message.reply_text(f"–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n{favorite_texts}")
    else:
        update.message.reply_text("–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æüò¢.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn
def learn(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    favorites = get_favorites_from_db(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if not favorites:
        update.message.reply_text("–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æüò¢.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∑—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    context.user_data['learn_index'] = 0
    context.user_data['learn_user_id'] = user_id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ñ—Ä–∞–∑—É
    show_next_phrase(update, context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—Ä–∞–∑—ã
def show_next_phrase(update: Update, context: CallbackContext):
    user_id = context.user_data.get('learn_user_id')
    learn_index = context.user_data.get('learn_index', 0)
    favorites = get_favorites_from_db(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if learn_index >= len(favorites):
        update.message.reply_text("–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Ñ—Ä–∞–∑—ã! üéâ")
        return

    phrase = favorites[learn_index]
    context.user_data['learn_index'] = learn_index + 1

    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data=f'translate_phrase_{learn_index}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f"–§—Ä–∞–∑–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n{phrase}", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz
def quiz(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üéÆ", url="http://t.me/TalkTranslatorbot/quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_text(update: Update, context: CallbackContext):
    user_text = update.message.text
    context.user_data['original_text'] = user_text

    target_language = context.user_data.get('target_language', 'en')
    translated_text = translate_text(user_text, target_language)

    keyboard = [
        [InlineKeyboardButton("–û–∑–≤—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üîä", callback_data='voice_translated')],
        [InlineKeyboardButton("–û–∑–≤—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª üîä", callback_data='voice_original')],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è", callback_data='add_to_favorites')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥ ({target_language}): {translated_text}", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    user_id = query.from_user.id
    original_text = context.user_data.get('original_text', '')
    target_language = context.user_data.get('target_language', 'en')

    if query.data == 'voice_translated':
        translated_text = translate_text(original_text, target_language)
        voice_file = create_voice_message(translated_text, target_language)
        if voice_file:
            query.message.reply_voice(voice=open(voice_file, 'rb'))
            os.remove(voice_file)
        else:
            query.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    elif query.data == 'voice_original':
        voice_file = create_voice_message(original_text, 'ru')
        if voice_file:
            query.message.reply_voice(voice=open(voice_file, 'rb'))
            os.remove(voice_file)
        else:
            query.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    elif query.data == 'add_to_favorites':
        add_favorite_to_db(user_id, original_text)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        query.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠êÔ∏è")

    elif query.data.startswith('lang_'):
        lang_code = query.data.split('_')[1]
        lang_names = {
            "en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–πüá¨üáß", "ru": "–†—É—Å—Å–∫–∏–πüá∑üá∫", "fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–πüá´üá∑", "de": "–ù–µ–º–µ—Ü–∫–∏–πüá©üá™",
            "tg": "–¢–∞–¥–∂–∏–∫—Å–∫–∏–πüáπüáØ", "uz": "–£–∑–±–µ–∫—Å–∫–∏–πüá∫üáø", "ar": "–ê—Ä–∞–±—Å–∫–∏–πüá∏üá¶", "it": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–πüáÆüáπ",
            "zh-TW": "–ö–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–πüá®üá≥", "zh-CN": "–ö–∏—Ç–∞–π—Å–∫–∏–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–πüá®üá≥", "ko": "–ö–æ—Ä–µ–π—Å–∫–∏–πüá∞üá∑",
            "ja": "–Ø–ø–æ–Ω—Å–∫–∏–πüáØüáµ", "es": "–ò—Å–ø–∞–Ω—Å–∫–∏–πüá™üá∏", "tr": "–¢—É—Ä–µ—Ü–∫–∏–πüáπüá∑", "kk": "–ö–∞–∑–∞—Ö—Å–∫–∏–πüá∞üáø",
            "ky": "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–πüá∞üá¨", "hi": "–•–∏–Ω–¥–∏üáÆüá≥", "bn": "–ë–µ–Ω–≥–∞–ª—å—Å–∫–∏–πüáßüá©", "pt": "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–πüáµüáπ",
            "ur": "–£—Ä–¥—Éüáµüá∞"
        }
        lang_name = lang_names.get(lang_code, '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
        context.user_data['target_language'] = lang_code
        query.message.reply_text(f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {lang_name}.")

    elif query.data.startswith('translate_phrase_'):
        learn_index = int(query.data.split('_')[-1])
        user_id = context.user_data.get('learn_user_id')
        target_language = context.user_data.get('target_language', 'en')
        favorites = get_favorites_from_db(user_id)

        phrase = favorites[learn_index]
        translated_text = translate_text(phrase, target_language)
        query.message.reply_text(f"–ü–µ—Ä–µ–≤–æ–¥:\n{translated_text}")

        voice_file = create_voice_message(translated_text, target_language)
        if voice_file:
            query.message.reply_voice(voice=open(voice_file, 'rb'))
            os.remove(voice_file)
        else:
            query.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

        show_next_phrase(query, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    updater = Updater("7278991582:AAFq_35XDFlt99pw4mY5fr_ErYwg7jQF8QI", use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("tolang", tolang))
    dp.add_handler(CommandHandler("favourites", show_favourites))
    dp.add_handler(CommandHandler("learn", learn))
    dp.add_handler(CommandHandler("quiz", quiz))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /quiz

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    dp.add_handler(CallbackQueryHandler(button_click))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()